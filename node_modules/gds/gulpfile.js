'use strict';

/* =================== Configs ====================== */

var configs = {}
configs.tasks = Array('styles','scripts','images');
configs.prod = false;

configs.source = './assets/source/';
configs.build  = './assets/build/';

/* =================== Imports ====================== */

// Defaults
var livereload = require('gulp-livereload');;
var gulp = require('gulp-param')(require('gulp'), process.argv);
var runSequence = require('run-sequence').use(gulp);
var del = require('del');
var rename = require('gulp-rename');
var gulpif = require('gulp-if');
var changed = require('gulp-changed');

/* ==================== Build Tasks ======================= */

var handleError = function(feedback) {
  console.log('[! Erro !] ' + feedback.message);
  this.emit('end');
}

gulp.task('styles', function() {
  // CSS

  var sass = require('gulp-sass');
  var postcss = require('gulp-postcss');
  var autoprefixer = require('autoprefixer-core');
  var a2cPrefixer = require('a2c-prefixer');
  var minifyCSS = require('gulp-minify-css');
  var sourcemaps = require('gulp-sourcemaps');
  var cleanCSS = require('gulp-clean-css');



   var style_full = gulp.src( configs.source + 'styles/*.scss' )
    .pipe(gulpif(!configs.prod, sourcemaps.init()))
    .pipe(sass()).on('error', handleError)
    .pipe(gulpif(configs.prod, postcss([
      autoprefixer({ browsers: ['last 2 versions'] }),
      a2cPrefixer
    ])))
    .pipe(gulpif(configs.prod, cleanCSS()))
    .pipe(rename({ suffix: '.min' }))
    .pipe(gulpif(!configs.prod, sourcemaps.write('./maps')))
    .pipe(gulp.dest( configs.build + 'styles/' ));

    if (configs.prod == false && livereload != false) {
      style_full.pipe(livereload());
    }

    return style_full;

});

gulp.task('scripts', function() {
  // JS
  var uglify = require('gulp-uglify');
  var concat = require('gulp-concat');
  var babel = require('gulp-babel');
  var plumber = require('gulp-plumber');

  gulp.src( [configs.source + 'scripts/plugins/**/*.js', configs.source + 'scripts/components/**/*.js', configs.source + 'scripts/core/**/*.js'] )
    .pipe(concat('gds.js'))
    .pipe(gulpif(configs.prod, plumber()))
    .pipe(gulpif(configs.prod, babel({
      presets: [
        ['@babel/env', {
          modules: false
        }]
      ]
    })))
    .pipe(gulpif(configs.prod, uglify())).on('error', handleError)
    .pipe(rename({ suffix: '.min' }))
    .pipe(gulp.dest( configs.build + 'scripts' ));
    
    gulp.src( configs.source + 'scripts/**/*.js' )
    .pipe(concat('gds-full.js'))
    .pipe(gulp.dest( configs.build + 'scripts' ));

  var script = gulp.src( [configs.source + 'scripts/plugins/**/*.js', configs.source + 'scripts/components/**/*.js', configs.source + 'scripts/vue/**/*.js', configs.source + 'scripts/core/**/*.js'] )
    .pipe(concat('gds-full.js'))
    .pipe(gulpif(configs.prod, plumber()))
    .pipe(gulpif(configs.prod, babel({
      compact: false,
      presets: [
        ['@babel/env', {
          modules: false
        }]
      ]
    })))
    .pipe(gulpif(configs.prod, uglify())).on('error', handleError)
    .pipe(rename({ suffix: '.min' }))
    .pipe(gulp.dest( configs.build + 'scripts' ));

  return script;
});

gulp.task('images', function() {
  // Images
  var imagemin = require('gulp-imagemin');
  var pngquant = require('imagemin-pngquant');
  var imageminJpegtran = require('imagemin-jpegtran');

  return gulp.src(configs.source + 'images/**/*.{gif,jpg,png,ico,svg}')
    .pipe(changed(configs.build + 'images/'))
    .pipe(gulpif(configs.prod, imagemin({
      optimizationLevel: 3,
      progressive: true,
      use: [pngquant(), imageminJpegtran({ progressive: true })]
    })))
    .pipe(gulp.dest(configs.build + 'images/'));
});

/* ================ Project Tasks =================== */

gulp.task('listen', function(page) {
  configs.prod = false;
  var watch = require('gulp-watch');

  livereload.listen();
  gulp.watch(configs.source + 'styles/**/*.scss', ['styles']);
  gulp.watch(configs.source + 'scripts/**/*.js', ['scripts']);
  gulp.watch(configs.source + 'images/**/*', ['images']);
});

gulp.task('clean', function(cb) {
  del([configs.build], cb);
});

gulp.task('cache', function(cb) {
  // Cache
  var cachebust = require('gulp-cache-refresh');

  gulp.src('app/index.html')
      .pipe(cachebust({
    type: 'timestamp'
      }))
  .pipe(gulp.dest('app/'));
});

gulp.task('default', function(production, listen) {
  if( production == true )
    configs.prod = true;

  if( production == true )
    configs.tasks.push('cache')

  if( listen == true )
    configs.tasks.push('listen');

  return runSequence.apply(null, configs.tasks);
});
