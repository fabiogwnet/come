// TODO: Novas props src
// TODO: Ajustar v-model
// TODO: delay axios

Vue.component('gds-autocomplete', {
    props: {
      src: {
        type: Function,
        required: false,
        default: () => {}
      },
      url: {
        type: String,
        required: false,
        default: ''
      },
      items: {
        type: Array,
        required: false,
        default: () => []
      },
      async: {
        type: Boolean,
        required: false,
        default: true
      },
      placeholder: {
        type: String,
        required: false,
        default: ''
      },
      maxResults: {
        type: Number,
        required: false,
        default: 5
      },
      highlight: {
        type: Boolean,
        required: false,
        default: true
      },
      awaylsOpen: {
        type: Boolean,
        required: false,
        default: true
      },
      threshold: {
        type: Number,
        required: false,
        default: 3
      },
      debounce: {
        type: Number,
        required: false,
        default: 300
      }
    },
    data() {
      return {
        isOpen: false,
        results: [],
        selecteds: [],
        search: "",
        loading: false,
        arrowCounter: 0,
        cancelToken: null,
        source: null
      };
    },
  
    methods: {
      highlightLabel(label) {
        if( !this.highlight ) {
          return label;
        }
  
        const reg = new RegExp(this.search, 'gi');
        return label.replace(reg, (string) => {
            return '<mark>' + string + '</mark>';
          });
      },
      onChange() {
        if( this.search.length < this.threshold ) {
          // this.isOpen = false;
          return;
        }
        // Let's warn the parent that a change was made
        // this.$emit("input", this.search);
  
        // Is the data given by an outside ajax request?
        if (this.async) {
  
          if( this.source ) {
            this.source.cancel();
          }
  
          this.loading = true;
  
          // Promise.resolve(this.src(this.search)).then(data => {
          //   this.results = data;
          //   this.loading = false;
          // });
  
          let formData = new FormData();
          formData.set('data[q]', this.search);
  
          this.source = this.cancelToken.source();
  
          axios({
            method: 'post',
            url: this.url,
            data: formData,
            cancelToken: this.source.token
          })
            .then((response) => {
              this.results = response.data.map((result) => {
                return { value: result.id, label: result.text }
              });
  
              this.loading = false;
            })
            .catch((error) => {
              if( error.message ) {
                console.log(error);
              }
            });
  
        } else {
          // Let's search our flat array
          this.filterResults();
          this.isOpen = true;
        }
      },
  
      filterResults() {
        // first uncapitalize all the things
        this.results = this.items.filter(item => {
          return item.label.toLowerCase().indexOf(this.search.toLowerCase()) > -1;
        });
      },
      updateResult(result) {
        // this.search = 'result';
  
        if( this.selecteds.indexOf(result) == -1 ) {
          this.selectResult(result)
        } else{
          this.unselectResult(result)
        }
        // this.isOpen = false;
  
        this.$emit('input', this.selecteds.map( selected => selected.value));
      },
      selectResult(result) {
        this.selecteds.push(result);
      },
      unselectResult(result) {
        this.selecteds.splice( this.selecteds.indexOf(result), 1);
      },
      onArrowDown(evt) {
        if (this.arrowCounter < this.results.length) {
          this.arrowCounter = this.arrowCounter + 1;
        }
      },
      onArrowUp() {
        if (this.arrowCounter > 0) {
          this.arrowCounter = this.arrowCounter - 1;
        }
      },
      onEnter() {
        this.updateResult(this.results[this.arrowCounter])
        // this.arrowCounter = -1;
      },
      handleClickOutside(evt) {
        if (!this.$el.contains(evt.target)) {
          this.isOpen = false;
          this.arrowCounter = -1;
        } else {
          this.isOpen = true;
        }
      }
    },
    watch: {
      items: function(val, oldValue) {
        // actually compare them
        if (val.length !== oldValue.length) {
          this.results = val;
          this.loading = false;
        }
      }
    },
    created() {
      this.cancelToken = axios.CancelToken;
    },
    mounted() {
      document.addEventListener("click", this.handleClickOutside);
    },
    destroyed() {
      document.removeEventListener("click", this.handleClickOutside);
    },
    template: `
    <div class="autocomplete">
      <input type="text" :placeholder="placeholder" class="form-control" @input="onChange" v-model="search" @keyup.down="onArrowDown" @keyup.up="onArrowUp" @keyup.enter="onEnter" />
      <div class="text-12 mt-1">
        <span v-for="selected in selecteds" class="badge badge-secondary cursor-pointer mb-1" @click="updateResult(selected)">{{ selected.label }}</span>
      </div>
      <div class="autocomplete-dropdown" v-show="isOpen">
        <ul id="autocomplete-results" class="autocomplete-results">
          <li class="autocomplete-loading" v-if="loading">
            <div class="spinner-border text-red">
              <span class="sr-only">Carregando...</span>
            </div>
          </li>
          <li v-else-if="search.length < threshold" class="autocomplete-placeholder">
            Digite para filtrar os resultados.
          </li>
          <li v-else-if="search.length >= threshold && results.length == 0" class="autocomplete-placeholder">
            Nenhum resultado encontrado.
          </li>
          <li v-else-if="search.length >= threshold" v-for="(result, i) in results" :key="result" @click="updateResult(result)" class="autocomplete-option" :class="{ 'is-active': i === arrowCounter, 'is-selected': selecteds.indexOf(result) > -1 }">
            <span v-html="highlightLabel(result.label)"></span> <i class="fas fa-check" v-if="selecteds.indexOf(result) > -1"></i>
          </li>
        </ul>
      </div>
    </div>
        `
  });
  